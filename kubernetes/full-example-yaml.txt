apiVersion: apps/v1
kind: Deployment
metadata:
  name: server                 # Name of the Deployment
  labels:
    app: server                # Labels help Services and other resources select this Deployment
  annotations:
    description:	       # Deployment description
spec:
  replicas: 1                  # Number of pod replicas
  selector:
    matchLabels:
      app: server              # Must match pod template labels
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: server
        image: 			      # Docker Image name and tag
        ports:
        - containerPort: 8080         # Port the container listens on
        env:                          # Environment variables
        - name: env1
          value: "val1"
        - name: secret_env
          valueFrom:                  # Reference a Kubernetes Secret
            secretKeyRef:
              name: vault-token-secret
              key: "secret_val"
        resources:                    # Resource limits & requests
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe:                  # Health check for whether pod is ready to receive traffic
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        livenessProbe:                   # Health check for whether pod is alive; Kubernetes restarts if failing
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        imagePullPolicy: IfNotPresent    # Only pull if image isn’t already present
---
apiVersion: v1
kind: Service
metadata:
  name: service
  labels:
    app: server
spec:
  selector:
    app: server                      # Matches the Deployment’s pod labels
  ports:
    - port: 8080                     # Cluster-internal port
      targetPort: 8080               # Maps to containerPort
      protocol: TCP
      nodePort: 30080                # Exposes this port on the host machine
  type: NodePort                     # Makes the service accessible from outside the cluster
